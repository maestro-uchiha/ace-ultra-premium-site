param(
  [Parameter(Mandatory=$true)][string]$Title,
  [string]$Slug,
  [string]$Description = "Short description for this article.",
  [string]$BodyPath,
  [string]$Date = (Get-Date -Format "yyyy-MM-dd")
)

$Root = Split-Path -Parent (Split-Path -Parent $PSCommandPath)
Set-Location $Root

$Version = "(unknown)"
if (Test-Path "$Root\VERSION") { try { $Version = (Get-Content "$Root\VERSION" -Raw).Trim() } catch {} }
Write-Host "[Amaterasu Static Deploy] Version $Version"
Write-Host "[ASD] New post workflow startingâ€¦`n"

# Canonical base from config.site.url (fallback empty)
$Domain = "https://YOUR-DOMAIN.example/"
$Money  = ""
if (Test-Path ".\config.json") {
  try {
    $cfg = Get-Content .\config.json -Raw | ConvertFrom-Json
    if ($cfg.site.url) { $Domain = ($cfg.site.url.TrimEnd('/') + '/') }
    if ($cfg.moneySite) { $Money = $cfg.moneySite }
  } catch {}
}

# Slug
if (-not $Slug -or $Slug.Trim() -eq "") {
  $Slug = ($Title.ToLower() -replace '[^a-z0-9]+','-').Trim('-')
}

$postRel = "blog\$Slug.html"
$postAbs = Join-Path $Root $postRel

# Body (supports .md or .html)
$bodyHtml = "<p>Write your content here. Replace this paragraph with your article body.</p>"
if ($BodyPath -and (Test-Path $BodyPath)) {
  $ext = [IO.Path]::GetExtension($BodyPath).ToLower()
  if ($ext -eq ".html") {
    $bodyHtml = Get-Content $BodyPath -Raw
  } elseif ($ext -eq ".md") {
    $md = Get-Content $BodyPath -Raw
    $md = ($md -split "`r?`n") -join "`n"
    $md = $md -replace '^# (.+)$', '<h1>$1</h1>'
    $md = $md -replace '^## (.+)$', '<h2>$1</h2>'
    $md = $md -replace '^\* (.+)$', '<li>$1</li>'
    $blocks = $md -split "`n`n"
    $htmlBlocks = foreach($b in $blocks){
      if ($b -match '^\s*<h\d|^\s*<li') { $b } else { "<p>$($b -replace "`n","<br>")</p>" }
    }
    $bodyHtml = ($htmlBlocks -join "`n").Trim()
  }
}

# JSON-LD (kept inside content so bake preserves it)
$postUrl = ($Domain.TrimEnd('/') + "/blog/$Slug.html")
$postJsonLd = @"
<script type="application/ld+json">
{
  "@context":"https://schema.org",
  "@type":"BlogPosting",
  "headline":"$Title",
  "datePublished":"$Date",
  "dateModified":"$Date",
  "author":{"@type":"Organization","name":"{{BRAND}}"},
  "publisher":{"@type":"Organization","name":"{{BRAND}}"},
  "mainEntityOfPage":{"@type":"WebPage","@id":"$postUrl"},
  "image":"$($Domain.TrimEnd('/'))/assets/img/og.jpg",
  "description":"$Description"
}
</script>
<script type="application/ld+json">
{
  "@context":"https://schema.org",
  "@type":"BreadcrumbList",
  "itemListElement":[
    {"@type":"ListItem","position":1,"name":"Home","item":"$($Domain)"},
    {"@type":"ListItem","position":2,"name":"Blog","item":"$($Domain)blog/"},
    {"@type":"ListItem","position":3,"name":"$Title","item":"$postUrl"}
  ]
}
</script>
"@

# CONTENT-ONLY with ASD markers (bake wraps via layout.html)
$content = @"
<!-- ASD:CONTENT_START -->
<h1>$Title</h1>
<p class="meta">$Date &middot; <a href="{{MONEY}}">{{MONEY}}</a></p>

<article class="prose">
$bodyHtml
</article>

$postJsonLd
<!-- ASD:CONTENT_END -->
"@

$content | Set-Content -Encoding UTF8 $postAbs
Write-Host "[ASD] Created $postRel"

# Update feed.xml (optional; sitemap is auto-generated by bake)
$feedPath = Join-Path $Root "feed.xml"
if (Test-Path $feedPath) {
  try {
    [xml]$rss = Get-Content $feedPath
    $chan = $rss.rss.channel
    if (-not $chan) {
      $rss.LoadXml('<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel><title>Blog</title><link>'+$Domain+'/blog/</link><description>Feed</description></channel></rss>')
      $chan = $rss.rss.channel
    }
    $item = $rss.CreateElement("item")
    $t = $rss.CreateElement("title"); $t.InnerText = $Title; $null = $item.AppendChild($t)
    $l = $rss.CreateElement("link");  $l.InnerText = "$postUrl"; $null = $item.AppendChild($l)
    $g = $rss.CreateElement("guid");  $g.InnerText = "$postUrl"; $null = $item.AppendChild($g)
    $d = $rss.CreateElement("pubDate"); $d.InnerText = [DateTime]::UtcNow.ToString("R"); $null = $item.AppendChild($d)
    $desc = $rss.CreateElement("description"); $desc.InnerText = $Description; $null = $item.AppendChild($desc)
    $null = $chan.AppendChild($item)
    $rss.Save($feedPath)
    Write-Host "[ASD] feed.xml updated"
  } catch { Write-Warning "[ASD] Could not update feed.xml: $_" }
} else {
  Write-Warning "[ASD] feed.xml not found; skipping"
}

# --- Friendly manual-next-step hint (does not execute bake)
$brandHint = "Your Brand"
$moneyHint = "https://your-domain.com"
try {
  if ($cfg) {
    if ($cfg.site -and $cfg.site.name) { $brandHint = $cfg.site.name }
    elseif ($cfg.brand) { $brandHint = $cfg.brand }
    if ($cfg.moneySite) { $moneyHint = $cfg.moneySite }
  }
} catch {}

Write-Host "`n[ASD] Next (manual):"
Write-Host ("  .\parametric-static\scripts\bake.ps1 -Brand ""{0}"" -Money ""{1}""" -f $brandHint, $moneyHint)
